
" disable some plugin
let g:pathogen_disabled = []

filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"vim: set fenc=utf-8:
set nocompatible
" source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

set encoding=utf-8

set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,latin1
set fileencoding=utf-8
set termencoding=utf-8

set t_Co=256
set background=dark
" colorscheme desert256
" colorscheme solarized
" colorscheme xoria256 
" map <ESC>[32~ <S-F8> "let <S-F8> work for me

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set wildmode=longest,list
set wildmenu

if has('win32')
    au GUIEnter * simalt ~x
else
    au GUIEnter * call MaximizeWindow()
endif
function! MaximizeWindow()
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction

autocmd BufEnter * :syntax sync fromstart

set mouse-=a
set gcr=a:blinkon0

let mapleader = ","
let g:mapleader = ","

filetype off
"Enable filetype plugin
filetype plugin indent on

"custom file type
au BufNewFile,BufRead *.inc set filetype=C
au BufNewFile,BufRead *.INC set filetype=C
au BufNewFile,BufRead *.MK  set filetype=make
au BufNewFile,BufRead *.mk  set filetype=make

"remove spaces
nmap <f12> :%s= *$==<cr>

nmap <leader>o :only<cr>

"Fast saving
nmap <silent> <leader>ww :w<cr>
nmap <silent> <leader>WW :w<cr>
nmap <silent> <leader>wf :w!<cr>
nmap <silent> <leader>WF :w!<cr>

"Fast quiting
nmap <silent> <leader>qw :wq<cr>
nmap <silent> <leader>qf :q!<cr>
nmap <silent> <leader>qq :cclose<cr>:q<cr>
nmap <silent> <leader>qa :qa<cr>

"search
vnoremap <silent> ,/ y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>
vnoremap <silent> ,? y?<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>

"Fast remove highlight search
nmap <silent> <SPACE> :nohl<cr>

"Fast redraw
nmap <silent> <leader>rr :redraw!<cr>

set nolinebreak
set wrap
set number
set so=1
set sidescrolloff=1
set sidescroll=1
set makeprg=make
set tabstop=4
set softtabstop=4
set shiftwidth=4
syn on
compiler gcc
set guioptions-=T
set guioptions-=r
set guioptions-=L
set guioptions+=i
set guioptions-=m
set guioptions+=c
set fileformat=unix
"set fileformats=unix
set cindent
set autoindent
set nocompatible
set expandtab
set smarttab
set linespace=0
set foldopen-=search " don't open folds when you search into them
set foldopen-=undo " don't open folds when you undo stuff
set fsync
set laststatus=2
""set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\[HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
""set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [POS=%04l,%03v][%p%%]\ [LEN=%L]
"set statusline=%F%m%r%h%w%=%k\ [FORMAT=%{&ff}]\ [%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ [POS=%04l,%03v][%p%%]\ [LEN=%L]
set nocursorline
set nocursorcolumn
set undolevels=1000
set history=1000
set nobackup
set noswapfile
"set updatecount=1000
set sessionoptions+=unix,slash
set hlsearch
set incsearch
"set ignorecase
set noerrorbells
set pastetoggle=<F2>
nnoremap j gj
nnoremap k gk
cmap w!! w !sudo tee % >/dev/null

set modelines=10
set modeline

"Favorite filetypes
set ffs=unix,dos
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

" Hide the mouse when typing text
set mousehide
set hidden

nmap <C-H> <C-W>h 
nmap <C-J> <C-W>j 
nmap <C-K> <C-W>k 
nmap <C-L> <C-W>l


nmap <leader>gs :Unite gtags/ref:<C-R>=expand("<cword>")<CR><CR>
nmap <leader>gg :Unite gtags/def:<C-R>=expand("<cword>")<CR><CR>
nmap <leader>gc :Unite gtags/ref:<C-R>=expand("<cword>")<CR><CR>

nmap <F7> :pop<CR>
nmap <F8> :tag <C-R>=expand("<cword>")<CR><CR>

"set complete
set completeopt=longest,menuone
" set completeopt=menuone,menu,longest

inoremap <expr> <CR>       pumvisible()?"\<C-Y>":"\<CR>"
"inoremap <expr> <SPACE>       pumvisible()?"\<C-Y>":"\<SPACE>"
inoremap <expr> <C-J>      pumvisible()?"\<PageDown>":"\<C-X><C-O>"
inoremap <expr> <C-K>      pumvisible()?"\<PageUp>":"\<C-K>"
inoremap <expr> <C-U>      pumvisible()?"\<C-E>":"\<C-U>"

nmap <leader>tt :CtrlPBufTag<cr>
nmap <leader>ff :Unite quickfix<cr>
nmap <leader>bb :Unite buffer<cr>
nmap <F5> :Unite tag<cr>


" The prefix key.
nnoremap    [unite]   <Nop>
nmap    t [unite]

nnoremap <silent> [unite]c  :<C-u>UniteWithCurrentDir
            \ -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir
            \ -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]r  :<C-u>Unite
            \ -buffer-name=register register<CR>
nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
nnoremap <silent> [unite]f
            \ :<C-u>Unite -buffer-name=resume resume<CR>
nnoremap <silent> [unite]d
            \ :<C-u>Unite -buffer-name=files -default-action=lcd directory_mru<CR>
nnoremap <silent> [unite]ma
            \ :<C-u>Unite mapping<CR>
nnoremap <silent> [unite]me
            \ :<C-u>Unite output:message<CR>
nnoremap  [unite]f  :<C-u>Unite source<CR>

nnoremap <silent> [unite]s
            \ :<C-u>Unite -buffer-name=files -no-split
            \ jump_point file_point buffer_tab
            \ file_rec:! file file/new file_mru<CR>

nnoremap <silent> [unite]g  :<C-u>Unite grep<CR>

" Start insert.
" let g:unite_enable_start_insert = 1
"let g:unite_enable_short_source_names = 1

" To track long mru history.
let g:unite_source_file_mru_long_limit = 3000
let g:unite_source_directory_mru_long_limit = 3000

" Like ctrlp.vim settings.
let g:unite_enable_start_insert = 1
let g:unite_winheight = 20
let g:unite_split_rule = 'botright'

call unite#custom#source('file,file/new,buffer,file_rec,tag,outline',
	\ 'matchers', 'matcher_fuzzy')
call unite#custom#profile('source/outline', 'ignorecase', 1)
call unite#custom#profile('source/grep', 'ignorecase', 1)
call unite#custom#profile('source/tag', 'ignorecase', 1)

" Set "-no-quit" automatically in grep unite source.
call unite#custom#profile('source/grep,source/gtags', 'context',
            \ {'no_quit' : 1})
"call unite#custom#profile('source/grep,source/gtags', 'context', {
            "\'keep_focus' : 1,
            "\'no_quit' : 1,
            "\})

" Prompt choices.
"let g:unite_prompt = '笶ｫ '
"let g:unite_prompt = 'ﾂｻ '
let g:unite_prompt = '>>> '

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
    "Overwrite settings.
    nmap <buffer> <ESC>      <Plug>(unite_exit)
    imap <buffer> <ESC>      <Plug>(unite_exit)
    imap <buffer> gg      <Plug>(unite_exit)
    nmap <buffer> gg      <Plug>(unite_exit)
    imap <buffer> jj      <Plug>(unite_insert_leave)
    "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

    imap <buffer><expr> j unite#smart_map('j', '')
    imap <buffer> <TAB>   <Plug>(unite_select_next_line)
    imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
    imap <buffer> '     <Plug>(unite_quick_match_default_action)
    nmap <buffer> '     <Plug>(unite_quick_match_default_action)
    imap <buffer><expr> x
                \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
    nmap <buffer> x     <Plug>(unite_quick_match_choose_action)
    nmap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
    imap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
    imap <buffer> <C-y>     <Plug>(unite_narrowing_path)
    nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
    nmap <buffer> <C-j>     <Plug>(unite_toggle_auto_preview)
    nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
    imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
    nnoremap <silent><buffer><expr> l
                \ unite#smart_map('l', unite#do_action('default'))

    let unite = unite#get_current_unite()
    if unite.profile_name ==# 'search'
        nnoremap <silent><buffer><expr> r     unite#do_action('replace')
    else
        nnoremap <silent><buffer><expr> r     unite#do_action('rename')
    endif

    nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
    nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
                \ empty(unite#mappings#get_current_filters()) ?
                \ ['sorter_reverse'] : [])

    " Runs "split" action by <C-s>.
    imap <silent><buffer><expr> <C-s>     unite#do_action('split')
endfunction"}}}

let g:unite_source_file_mru_limit = 200
let g:unite_cursor_line_highlight = 'TabLineSel'
let g:unite_abbr_highlight = 'TabLine'

" For optimize.
let g:unite_source_file_mru_filename_format = ''

if executable('jvgrep')
    " For jvgrep.
    let g:unite_source_grep_command = 'jvgrep'
    let g:unite_source_grep_default_opts = '--exclude ''\.(git|svn|hg|bzr)'''
    let g:unite_source_grep_recursive_opt = '-R'
endif

" For ack.
if executable('ack-grep')
    " let g:unite_source_grep_command = 'ack-grep'
    " let g:unite_source_grep_default_opts = '--no-heading --no-color -a -H'
    let g:unite_source_grep_command = '/usr/bin/vendor_perl/ack'
    let g:unite_source_grep_default_opts = '-H --nocolor --nogroup --column'
    " let g:unite_source_grep_recursive_opt = '-R'
    call unite#custom#source('grep', 'ignore_pattern', '\~$\|\.\%(o\|exe\|dll\|bak\|sw[po]\)$\|'.
      \'\%(^\|/\)\.\%(hg\|git\|bzr\|svn\)\%($\|/\)\|'.
      \'\%(^\|/\)tags\%(-\a*\)\?$')
endif

function! My_bufferGrep()
    let l:current_word = expand("<cword>")
    " If the word is too big then blank it out
    if strlen(l:current_word) > 80
        let l:current_word = ""
    endif

    " Ask to verify the word
    echohl Search
    let l:search_word = input(l:current_word.",/")
    echohl None

    " If no new word was given use the one we picked up.
    if strlen(l:search_word) == 0
        let l:search_word = l:current_word
    endif

    " If only \c was passed then append it to the beginning
    if l:search_word == "\\c"
        let l:search_word = l:search_word.l:current_word
    endif

    if exists(':Unite')
        exec "Unite grep:%::".l:search_word
    else
        exec "GrepBuffer ".l:search_word
    endif
endfunction

" noremap <leader>v :Unite grep:%::<C-r><C-w>
noremap <leader>v :call My_bufferGrep()<CR>

let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'

"Fast reloading of the _vimrc
map <silent> <leader>s :source $HOME/.vimrc<cr>
"Fast editing of _vimrc
map <silent> <leader>e :e $HOME/.vimrc<cr>

"When vimrc is edited, reload it
autocmd! bufwritepost .vimrc source $HOME/.vimrc

map <C-n> :cn<CR>
map <C-p> :cp<CR>

map <leader>bd :Bclose<cr>
"map <leader>bd :bd<cr>
vnoremap <leader>y "+y
nmap <leader>yw "+yw
nmap <leader>p "+p

